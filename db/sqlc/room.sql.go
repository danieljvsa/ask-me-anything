// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: room.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (
    user_id
) values (
    $1
) RETURNING id, user_id, created_at, updated_at
`

func (q *Queries) CreateRoom(ctx context.Context, userID pgtype.Int8) (Room, error) {
	row := q.db.QueryRow(ctx, createRoom, userID)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM rooms
WHERE id=$1
`

func (q *Queries) DeleteRoom(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteRoom, id)
	return err
}

const getRoom = `-- name: GetRoom :one
SELECT id, user_id, created_at, updated_at FROM rooms
WHERE id=$1 LIMIT 1
`

func (q *Queries) GetRoom(ctx context.Context, id int64) (Room, error) {
	row := q.db.QueryRow(ctx, getRoom, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listRooms = `-- name: ListRooms :many
SELECT id, user_id, created_at, updated_at FROM rooms
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListRoomsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRooms(ctx context.Context, arg ListRoomsParams) ([]Room, error) {
	rows, err := q.db.Query(ctx, listRooms, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoom = `-- name: UpdateRoom :one
UPDATE rooms 
SET user_id = $2 
WHERE id=$1
RETURNING id, user_id, created_at, updated_at
`

type UpdateRoomParams struct {
	ID     int64       `json:"id"`
	UserID pgtype.Int8 `json:"user_id"`
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, updateRoom, arg.ID, arg.UserID)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
